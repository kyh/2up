---
description: Detailed Database Schema and Architecture
globs: apps/**/*.tsx,packages/**/*.tsx
alwaysApply: true
---

# Database Rules

## Database Architecture
- We use Supabase as our Postgres database provider
- Drizzle is the ORM we use to interact with the database, only use the Supabase client directly when necessary (such as calling functions)
- We strive to create a safe, robust, performant schema

## Migrations
- The Drizzle schema, `packages/db/src/schema.ts`, is the source of truth for the database schema
- We typically don’t wanna deal with SQL migration files. We want Drizzle to “push” my schema directly to the database (`pnpm db:push`)
- However, if we need something Drizzle doesn’t support, we can create a migration file (`packages/db/supabase/migrations`)

## Security & RLS
- We don't use RLS by default because rows are accessed through the API, which is already secured
- However, if the table needs direct client access, enable RLS for the table

## Schema Overview

### Core Entity Relationships

1. `users`:
   - This table is created by Supabase. It represents a authed user account
   - Refer to Supabase auth docs for more info

2. `teams` and `team_members`:
   - Each user has a personal team account (1:1), but can create more if needed
   - Users are `team_members` of that team
   - They are of the `member` role by default (could be owner, admin, member)

3. `invitations`:
   - Users can invite others to their team
