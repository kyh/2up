---
description: An example of making a mutation
globs: apps/**/*.tsx,packages/**/*.tsx
alwaysApply: false
---

# Mutating data

1. Define a Zod schema
2. Create a TRPC route to handle the form submission
3. Create a form component to handle the form submission

## Zod Schema

Define the crud operations as a Zod schema in the `packages/api/src/[entity]` folder. Name the file `[entity]-schema.ts`.

Follow the example below to create all api schemas:

```ts
// packages/api/src/note/note-schema.ts
import { z } from "zod";

/**
 * Create schema
 */
export const createNoteInput = z.object({
  title: z.string().min(1),
  content: z.string().min(1),
});
export type CreateNoteInput = z.infer<typeof createNoteInput>;

/**
 * Update schema
 */
export const updateNoteInput = z.object({
  id: z.string().uuid(),
  title: z.string().min(1),
  content: z.string().min(1),
});
export type UpdateNoteInput = z.infer<typeof updateNoteInput>;

/**
 * Delete schema
 */
export const deleteNoteInput = z.object({
  id: z.string().uuid(),
});
export type DeleteNoteInput = z.infer<typeof deleteNoteInput>;

/**
 * Get schema
 */
export const getNoteInput = z.object({
  id: z.string().uuid(),
});
export type GetNoteInput = z.infer<typeof getNoteInput>;
```

## TRPC Route

Create or update a TRPC route to handle the form submission in the `packages/api/src/[entity]` folder.

Name the file `[entity]-router.ts`.

Follow the example below to create all api routes:

```ts
// packages/api/src/note/note-router.ts
import { trpc } from "@trpc/server";
import { z } from "zod";

import {
  createNoteInput,
  deleteNoteInput,
  getNoteInput,
  updateNoteInput,
} from "./note-schema";

export const noteRouter = trpc.router({
  createNote: trpc.mutation
    .input(createNoteInput)
    .resolve(async ({ input }) => {
      // Create note logic
      return { id: "1", ...input };
    }),
  updateNote: trpc.mutation
    .input(updateNoteInput)
    .resolve(async ({ input }) => {
      // Update note logic
      return { id: input.id, ...input };
    }),
  deleteNote: trpc.mutation
    .input(deleteNoteInput)
    .resolve(async ({ input }) => {
      // Delete note logic
      return { id: input.id };
    }),
  getNote: trpc.query.input(getNoteInput).resolve(async ({ input }) => {
    // Get note logic
    return { id: input.id, title: "Note title", content: "Note content" };
  }),
});
```

## Forms

- Use React Hook Form for form validation and submission
- Use Zod for form validation
- No need to revalidate react query on submission since we automatically revalidate the entire page

Follow the example below to create all forms:

```tsx
// apps/nextjs/src/app/notes/_components/create-note-form.tsx
import { createNoteInput } from "@init/api/note/note-schema";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
  useForm,
} from "@init/ui/form";
import { useMutation } from "@tanstack/react-query";

import { useTRPC } from "@/trpc/react";

export const CreateNoteForm = () => {
  const trpc = useTRPC();
  const createNoteMutation = useMutation(
    trpc.note.createNote.mutationOptions(),
  );

  const form = useForm({
    schema: createNoteInput,
  });

  const onSubmit = (data) => {
    createNoteMutation.mutate(data);
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)}>
        <FormField
          control={form.control}
          name="title"
          render={({ field }) => (
            <FormItem>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="content"
          render={({ field }) => (
            <FormItem>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">Submit</Button>
      </form>
    </Form>
  );
};
```
