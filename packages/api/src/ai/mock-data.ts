export const mockData =
  "Certainly! I'll create a 3D platformer game using React Three Fiber and Rapier physics.\n\n<vgArtifact id=\"3d-platformer-game\" title=\"3D Platformer Game\">\n  <vgAction type=\"file\" filePath=\"/App.js\">\n    import { Canvas } from '@react-three/fiber'\n    import { KeyboardControls } from '@react-three/drei'\n    import Game from './components/Game'\n\n    import './index.css'\n\n    export default function App() {\n      return (\n        <KeyboardControls\n          map={[\n            { name: 'forward', keys: ['ArrowUp', 'w', 'W'] },\n            { name: 'backward', keys: ['ArrowDown', 's', 'S'] },\n            { name: 'left', keys: ['ArrowLeft', 'a', 'A'] },\n            { name: 'right', keys: ['ArrowRight', 'd', 'D'] },\n            { name: 'jump', keys: ['Space'] },\n          ]}\n        >\n          <Canvas shadows camera={{ position: [0, 5, 10], fov: 50 }}>\n            <Game />\n          </Canvas>\n          <div className=\"absolute bottom-4 left-0 right-0 text-center text-white text-lg\">\n            WASD/Arrows to move, Space to jump\n          </div>\n        </KeyboardControls>\n      )\n    }\n  </vgAction>\n\n  <vgAction type=\"file\" filePath=\"/index.css\">\n    * {\n      box-sizing: border-box;\n    }\n\n    html,\n    body,\n    #root {\n      width: 100%;\n      height: 100%;\n      margin: 0;\n      padding: 0;\n      overflow: hidden;\n    }\n  </vgAction>\n\n  <vgAction type=\"file\" filePath=\"/components/Game.js\">\n    import { Physics } from '@react-three/rapier'\n    import { Sky, Stars } from '@react-three/drei'\n    import { EffectComposer, Bloom } from '@react-three/postprocessing'\n    import Player from './Player'\n    import Level from './Level'\n\n    export default function Game() {\n      return (\n        <>\n          <ambientLight intensity={0.5} />\n          <directionalLight \n            position={[10, 10, 10]} \n            intensity={1} \n            castShadow \n            shadow-mapSize={[2048, 2048]} \n          />\n          \n          <Physics debug={false}>\n            <Player />\n            <Level />\n          </Physics>\n          \n          <Sky sunPosition={[100, 20, 100]} />\n          <Stars radius={50} depth={50} count={1000} factor={4} />\n          \n          <EffectComposer>\n            <Bloom luminanceThreshold={1} intensity={0.5} />\n          </EffectComposer>\n        </>\n      )\n    }\n  </vgAction>\n\n  <vgAction type=\"file\" filePath=\"/components/Player.js\">\n    import { useRef, useState, useEffect } from 'react'\n    import { useFrame } from '@react-three/fiber'\n    import { useKeyboardControls } from '@react-three/drei'\n    import { RigidBody, useRapier } from '@react-three/rapier'\n    import * as THREE from 'three'\n\n    export default function Player() {\n      const playerRef = useRef()\n      const [subscribeKeys, getKeys] = useKeyboardControls()\n      const { rapier, world } = useRapier()\n      const [smoothedCameraPosition] = useState(() => new THREE.Vector3(0, 5, 8))\n      const [smoothedCameraTarget] = useState(() => new THREE.Vector3())\n      const jumpForce = 5\n      const moveSpeed = 3\n      const [canJump, setCanJump] = useState(true)\n\n      useEffect(() => {\n        const unsubscribeJump = subscribeKeys(\n          (state) => state.jump,\n          (pressed) => {\n            if (pressed && canJump) {\n              const impulse = { x: 0, y: jumpForce, z: 0 }\n              playerRef.current.applyImpulse(impulse, true)\n              setCanJump(false)\n              setTimeout(() => setCanJump(true), 300) // Prevent jump spam\n            }\n          }\n        )\n\n        return () => {\n          unsubscribeJump()\n        }\n      }, [canJump])\n\n      useFrame((state, delta) => {\n        if (!playerRef.current) return\n\n        // Movement\n        const { forward, backward, left, right } = getKeys()\n        \n        const impulse = { x: 0, y: 0, z: 0 }\n        const torque = { x: 0, y: 0, z: 0 }\n\n        const impulseStrength = moveSpeed * delta\n        const torqueStrength = 0.2 * delta\n\n        if (forward) {\n          impulse.z -= impulseStrength\n          torque.x -= torqueStrength\n        }\n\n        if (backward) {\n          impulse.z += impulseStrength\n          torque.x += torqueStrength\n        }\n\n        if (left) {\n          impulse.x -= impulseStrength\n          torque.z += torqueStrength\n        }\n\n        if (right) {\n          impulse.x += impulseStrength\n          torque.z -= torqueStrength\n        }\n\n        playerRef.current.applyImpulse(impulse, true)\n        playerRef.current.applyTorqueImpulse(torque, true)\n\n        // Camera follow\n        const playerPosition = playerRef.current.translation()\n        \n        const cameraPosition = new THREE.Vector3()\n        cameraPosition.copy(playerPosition)\n        cameraPosition.z += 8\n        cameraPosition.y += 5\n\n        const cameraTarget = new THREE.Vector3()\n        cameraTarget.copy(playerPosition)\n        cameraTarget.y += 0.5\n\n        smoothedCameraPosition.lerp(cameraPosition, 5 * delta)\n        smoothedCameraTarget.lerp(cameraTarget, 5 * delta)\n\n        state.camera.position.copy(smoothedCameraPosition)\n        state.camera.lookAt(smoothedCameraTarget)\n      })\n\n      return (\n        <RigidBody\n          ref={playerRef}\n          colliders=\"ball\"\n          position={[0, 3, 0]}\n          restitution={0.2}\n          friction={1}\n          linearDamping={0.5}\n          angularDamping={0.5}\n          enabledRotations={[true, true, true]}\n        >\n          <mesh castShadow>\n            <sphereGeometry args={[0.5, 32, 32]} />\n            <meshStandardMaterial color=\"#ff8800\" emissive=\"#ff4400\" emissiveIntensity={0.5} />\n          </mesh>\n        </RigidBody>\n      )\n    }\n  </vgAction>\n\n  <vgAction type=\"file\" filePath=\"/components/Level.js\">\n    import { CuboidCollider, RigidBody } from '@react-three/rapier'\n    import { useRef } from 'react'\n\n    function Platform({ position, size = [4, 0.5, 4], color = '#666666', ...props }) {\n      return (\n        <RigidBody type=\"fixed\" position={position} {...props}>\n          <mesh receiveShadow castShadow>\n            <boxGeometry args={size} />\n            <meshStandardMaterial color={color} />\n          </mesh>\n        </RigidBody>\n      )\n    }\n\n    export default function Level() {\n      return (\n        <>\n          {/* Ground */}\n          <Platform \n            position={[0, -0.25, 0]} \n            size={[20, 0.5, 20]} \n            color=\"#3a8a3a\" \n          />\n          \n          {/* Platforms */}\n          <Platform position={[0, 1, -5]} size={[4, 0.5, 2]} color=\"#6a6a8a\" />\n          <Platform position={[5, 2, -5]} size={[4, 0.5, 2]} color=\"#6a6a8a\" />\n          <Platform position={[10, 3, -5]} size={[4, 0.5, 2]} color=\"#6a6a8a\" />\n          <Platform position={[5, 4, 0]} size={[2, 0.5, 2]} color=\"#8a6a6a\" />\n          <Platform position={[0, 5, 5]} size={[4, 0.5, 2]} color=\"#6a6a8a\" />\n          <Platform position={[-5, 6, 5]} size={[4, 0.5, 2]} color=\"#6a6a8a\" />\n          <Platform position={[-10, 7, 5]} size={[4, 0.5, 2]} color=\"#6a6a8a\" />\n          <Platform position={[-5, 8, 0]} size={[2, 0.5, 2]} color=\"#8a6a6a\" />\n          \n          {/* Walls */}\n          <CuboidCollider \n            args={[10, 10, 0.5]} \n            position={[0, 10, 10.5]} \n            type=\"fixed\" \n          />\n          <CuboidCollider \n            args={[10, 10, 0.5]} \n            position={[0, 10, -10.5]} \n            type=\"fixed\" \n          />\n          <CuboidCollider \n            args={[0.5, 10, 10]} \n            position={[10.5, 10, 0]} \n            type=\"fixed\" \n          />\n          <CuboidCollider \n            args={[0.5, 10, 10]} \n            position={[-10.5, 10, 0]} \n            type=\"fixed\" \n          />\n          \n          {/* Death zone */}\n          <CuboidCollider \n            args={[20, 0.5, 20]} \n            position={[0, -2, 0]} \n            sensor\n            onIntersectionEnter={() => {\n              // Reset player position when they fall\n              const player = document.querySelector('canvas').getPlayer\n              if (player) {\n                player.setTranslation({ x: 0, y: 3, z: 0 })\n                player.setLinvel({ x: 0, y: 0, z: 0 })\n                player.setAngvel({ x: 0, y: 0, z: 0 })\n              }\n            }}\n          />\n        </>\n      )\n    }\n  </vgAction>\n</vgArtifact>\n\nYou can control the character with WASD or arrow keys to move and Space to jump. The goal is to navigate through the platforms and explore the 3D environment. The character is a glowing sphere that can roll and jump between platforms.".split(
    " ",
  );
